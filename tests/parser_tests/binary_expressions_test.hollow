// test binary expressions and operator precedence for arithmetic ops
10 + 20;
10 + 20 * 30;
10 * 20 + 30;
10 - 20 / 30;
10 / 5 - 30;

10 & 3 | 5 ^ 2;
2 + 3 * 4 == 14;
1 - 2 - 3;
8 / 4 / 2;

// test bitwise ops precedence with arithmetic ops
10 & 3 + 2;
8 | 4 * 2;         // => 8 | (4 * 2)
6 ^ 2 + 1;         // => 6 ^ (2 + 1)

// test comparison and equality precedence with arithmetic ops
1 + 2 == 3;        // => (1 + 2) == 3
4 * 2 < 10;        // => (4 * 2) < 10
6 / 3 != 2;        // => (6 / 3) != 2

// test logical operators with other operators
1 + 2 && 3;        // => (1 + 2) && 3
4 * 2 || 0;        // => (4 * 2) || 0
1 == 1 || 0;       // => (1 == 1) || 0

(1 + 2) * 3;       // => parenthesized addition first
(4 - 1) * (2 + 2); // => both sides grouped
(5 + 3) & 7;       // => (5 + 3) first

1 & 2 == 0;        // => (1 & 2) == 0
1 + 2 | 4 ^ 3;     // => ((1 + 2) | (4 ^ 3))

// chain bitwise ops
1 & 2 & 3;     // => (1 & 2) & 3
1 | 2 | 3;     // => (1 | 2) | 3
1 ^ 2 ^ 3;     // => (1 ^ 2) ^ 3

1 == 2 < 3;    // => 1 == (2 < 3)
1 < 2 == 3;    // => (1 < 2) == 3

1 || 2 && 3;   // => 1 || (2 && 3)
1 && 2 || 3;   // => (1 && 2) || 3

1 + 2 + 3 + 4 + 5 + 6 + 7;
(((1 + 2) * 3) - 4) / 5;